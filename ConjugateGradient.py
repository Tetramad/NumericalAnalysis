import unittest
import logging
import scipy as sp
import scipy.linalg as linalg
from scipy.sparse.linalg import cg
from scipy.sparse.linalg import cgs
from scipy.sparse.linalg import bicg
from scipy.sparse.linalg import bicgstab
from scipy.sparse.linalg import spsolve
from scipy.sparse import csc_matrix
from timeit import timeit


class TestDefaultCG(unittest.TestCase):
    def test_example5(self):
        A = sp.array([[2, -1, 0],
                      [-1, 3, -1],
                      [0, -1, 2]], dtype=float)
        b = sp.array([1, 8, -5], dtype=float)
        expect = sp.sort(sp.array([-1, 2, 3], dtype=float))
        self._test_cg(self.test_example5.__name__, linalg.solve, A, b, expect)
        self._test_cg(self.test_example5.__name__, BookCG, A, b, expect)
        self._test_cg(self.test_example5.__name__, WikiCG, A, b, expect)
        self._test_cg(self.test_example5.__name__, ScipyCG, csc_matrix(A), b, expect)
        self._test_cg(self.test_example5.__name__, ScipyCGS, csc_matrix(A), b, expect)
        self._test_cg(self.test_example5.__name__, ScipyBicG, csc_matrix(A), b, expect)
        self._test_cg(self.test_example5.__name__, ScipyBicGStab, csc_matrix(A), b, expect)
        self._test_cg(self.test_example5.__name__, ScipySpSolve, csc_matrix(A), b, expect)

    def test_examplewiki(self):
        A = sp.array([[4, 1],
                      [1, 3]], dtype=float)
        b = sp.array([1, 2], dtype=float)
        expect = sp.sort(sp.array([1/11, 7/11], dtype=float))
        self._test_cg(self.test_examplewiki.__name__, linalg.solve, A, b, expect)
        self._test_cg(self.test_examplewiki.__name__, BookCG, A, b, expect)
        self._test_cg(self.test_examplewiki.__name__, WikiCG, A, b, expect)
        self._test_cg(self.test_examplewiki.__name__, ScipyCG, csc_matrix(A), b, expect)
        self._test_cg(self.test_examplewiki.__name__, ScipyCGS, csc_matrix(A), b, expect)
        self._test_cg(self.test_examplewiki.__name__, ScipyBicG, csc_matrix(A), b, expect)
        self._test_cg(self.test_examplewiki.__name__, ScipyBicGStab, csc_matrix(A), b, expect)
        self._test_cg(self.test_examplewiki.__name__, ScipySpSolve, csc_matrix(A), b, expect)


    def test_computer_example11(self):
        n = 1000
        A = sp.zeros((n, n), dtype=float)
        b = sp.ndarray((n))
        expect = sp.ones((n), dtype=float)

        for i in range(n):
            A[n-i-1][i] = 0.5
            A[i][i] = 3
            b[i] = 1.5

        for i in range(n - 1):
            A[i+1][i] = -1
            A[i][i+1] = -1
        b[0] = 2.5
        b[-1] = 2.5
        b[n//2] = 1.0

        self._test_cg(self.test_computer_example11.__name__, linalg.solve, A, b, expect)
        self._test_cg(self.test_computer_example11.__name__, BookCG, A, b, expect)
        self._test_cg(self.test_computer_example11.__name__, WikiCG, A, b, expect)
        self._test_cg(self.test_computer_example11.__name__, ScipyCG, csc_matrix(A), b, expect)
        self._test_cg(self.test_computer_example11.__name__, ScipyCGS, csc_matrix(A), b, expect)
        self._test_cg(self.test_computer_example11.__name__, ScipyBicG, csc_matrix(A), b, expect)
        self._test_cg(self.test_computer_example11.__name__, ScipyBicGStab, csc_matrix(A), b, expect)
        self._test_cg(self.test_computer_example11.__name__, ScipySpSolve, csc_matrix(A), b, expect)


    def test_BCSSTK15(self):
        '''
        A is using BCSSTK15 finded at https://math.nist.gov/MatrixMarket/data/Harwell-Boeing/bcsstruc2/bcsstk15.html
        x is generated by scipy.random.rand

        3948 x 3948, 60882 entries, 99.61% sparsity
        '''
        data = sp.load('./BCSSTK15.npz')

        self._test_cg(self.test_BCSSTK15.__name__, linalg.solve, data['A'], data['b'], data['x'])
        self._test_cg(self.test_BCSSTK15.__name__, BookCG, data['A'], data['b'], data['x'])
        self._test_cg(self.test_BCSSTK15.__name__, WikiCG, data['A'], data['b'], data['x'])
        # scipy.sparse.linalg.cg needs about 1.5 hours to benchmark it
        # self._test_cg(self.test_BCSSTK15.__name__, ScipyCG, csc_matrix(data['A']), data['b'], data['x'])
        self._test_cg(self.test_BCSSTK15.__name__, ScipyCGS, csc_matrix(data['A']), data['b'], data['x'])
        # scipy.sparse.linalg.bicg needs about 2.6 hours to benchmark it
        # self._test_cg(self.test_BCSSTK15.__name__, ScipyBicG, csc_matrix(data['A']), data['b'], data['x'])
        self._test_cg(self.test_BCSSTK15.__name__, ScipyBicGStab, csc_matrix(data['A']), data['b'], data['x'])
        self._test_cg(self.test_BCSSTK15.__name__, ScipySpSolve, csc_matrix(data['A']), data['b'], data['x'])


    def _test_cg(self, tname, cg, A, b, expect):
        logging.info(f'{tname} with {cg.__name__}')
        expect = sp.sort(expect)
        actual = sp.sort(cg(A, b))
        logging.debug(f'{tname} A\n{str(A)}')
        logging.debug(f'{tname} b\n{str(b)}')
        logging.debug(f'{tname} expect\n{str(expect)}')
        logging.debug(f'{tname} actual\n{str(actual)}')
        elapsed = timeit(lambda: cg(A, b), number=1000)
        logging.info(f'{tname} {elapsed:.3}ms')
        abserrorsum = sp.sum(sp.absolute(expect - actual))
        logging.info(f'{tname} sum of absolute errors = {abserrorsum:.3}')


def BookCG(A, b, e=1e-8, k_max=100):
    k = 0
    d_old = 0
    x = sp.zeros((A.shape[0]))
    r = b - sp.matmul(A, x)
    d = sp.dot(r, r)
    while sp.sqrt(d) > e*sp.sqrt(sp.dot(b, b)) and k < k_max:
        k = k + 1
        if k == 1:
            p = r
        else:
            beta = d/d_old
            p = r + beta*p
        w = sp.matmul(A, p)
        a = d/sp.dot(p, w)
        x = x + a*p
        r = r - a*w
        d_old = d
        d = sp.dot(r, r)

    return x


def WikiCG(A, b, *, e=1e-8, iter_max=100):
    x = sp.zeros(b.shape, dtype=float)
    r = b - sp.matmul(A, x)
    p = sp.copy(r)
    rr = sp.dot(r, r)
    for _ in range(iter_max):
        Ap = sp.matmul(A, p)
        alpha = rr/sp.matmul(p, Ap)
        x += alpha*p
        r -= alpha*Ap
        if linalg.norm(r) < e:
            break
        beta = rr
        rr = sp.dot(r, r)
        beta = rr/beta
        p = r + beta * p
    return x


def ScipyCG(A, b, *, e=1e-8):
    return cg(A, b, atol=e)[0]


def ScipyCGS(A, b, *, e=1e-8):
    return cgs(A, b, atol=e)[0]


def ScipyBicG(A, b, *, e=1e-8):
    return bicg(A, b, atol=e)[0]

def ScipyBicGStab(A, b, *, e=1e-8):
    return bicgstab(A, b, atol=e)[0]

def ScipySpSolve(A, b):
    return spsolve(A, b)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    unittest.main()
